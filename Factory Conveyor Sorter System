from pyjop import *
import time

# Connect to the current SimEnv
SimEnv.connect()

# Create references to entities in the SimEnv
env = SimEnvManager.first().reset()
firstscanner = RangeFinder.find("scan0")  # center scanner
rightscanner = RangeFinder.find("scan1")  # right-side scanner

# Directly find the specific conveyor belts
belt0 = ConveyorBelt.find("belt0")
belt1 = ConveyorBelt.find("belt1")
belt2 = ConveyorBelt.find("belt2")
belt3 = ConveyorBelt.find("belt3")
belt4 = ConveyorBelt.find("belt4")
objspawn = ObjectSpawner.find("spawner")

def set_belt_speeds(belt_speeds):
    for belt, speed in belt_speeds.items():
        belt.set_target_speed(speed)

# Main loop
while SimEnv.run_main():
    # Check if belt0 is transporting
    belt0_transporting = belt0.get_is_transporting()

    if not belt0_transporting:
        # If belt0 is not transporting, spawn a new object
        objspawn.spawn()
        print("Spawning new object.")

    # Read the RFID tag for the current item on belt0
    tag = firstscanner.get_rfid_tag()

    # Set belt0 to move items forward at speed 5
    belt0.set_target_speed(5)

    # Set belt1 direction based on the tag
    if tag == "Box":
        set_belt_speeds({belt1: 10, belt3: 10})  # Move right for Box
    elif tag == "Barrel":
        set_belt_speeds({belt1: -10, belt2: 10})  # Move left for Barrel
    elif tag == "Cone":
        set_belt_speeds({belt1: 10, belt3: 10})  # Move right for Cone

    # Wait for belt1 to finish transporting
    while belt1.get_is_transporting():
        time.sleep(1)

    # Check final delivery on belt4 (final delivery logic)
    tag2 = rightscanner.get_rfid_tag()
    if tag2 == "Box":
        if belt4.get_is_transporting():
            belt3.set_target_speed(0)  # Stop belt3 while belt4 is transporting
        else:
            set_belt_speeds({belt3: 10, belt4: -10})  # Move belt3 forward and belt4 backward for Box
    elif tag2 == "Cone":
        if belt4.get_is_transporting():
            belt3.set_target_speed(0)  # Stop belt3 while belt4 is transporting
        else:
            set_belt_speeds({belt3: 10, belt4: 10})  # Move belt3 forward and belt4 forward for Cone
    else:
        belt4.set_target_speed(0)  # Stop belt4 if no recognizable tag

# Cleanup close code
SimEnv.disconnect()
